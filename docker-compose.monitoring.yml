version: '3.8'

services:
  # Main Solana Trading Bot
  solana-trading-bot:
    build: .
    container_name: solana-trading-bot
    ports:
      - "3000:3000"  # Dashboard
    environment:
      - RUST_LOG=info
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:pass@postgres:5432/solana_bot}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL:-https://api.mainnet-beta.solana.com}
      - JUPITER_API_URL=${JUPITER_API_URL:-https://quote-api.jup.ag}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - MONITORING_DASHBOARD_PORT=3000
      - OTLP_ENDPOINT=http://jaeger:4317
    volumes:
      - ./monitoring-config.yaml:/app/monitoring-config.yaml:ro
      - bot-data:/app/data
    depends_on:
      - postgres
      - redis
      - jaeger
    restart: unless-stopped
    networks:
      - solana-bot-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: solana-bot-db
    environment:
      - POSTGRES_DB=solana_bot
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - solana-bot-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: solana-bot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - solana-bot-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: solana-bot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - solana-bot-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: solana-bot-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - solana-bot-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: solana-bot-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - solana-bot-network

  # AlertManager for alert routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: solana-bot-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    networks:
      - solana-bot-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: solana-bot-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - solana-bot-network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: solana-bot-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - solana-bot-network

volumes:
  bot-data:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  alertmanager-data:

networks:
  solana-bot-network:
    driver: bridge