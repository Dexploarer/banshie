# Docker Compose for Solana Trading Bot Development Environment
# Based on 2025 best practices with monitoring stack

version: '3.8'

services:
  # ================================
  # Main Application
  # ================================
  solana-trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: solana-trading-bot
    restart: unless-stopped
    ports:
      - "8080:8080"  # Health check endpoint
    env_file: .env
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-changeme}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379
      - PORT=8080
      - ENABLE_COPY_TRADING=true
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # Database (PostgreSQL)
  # ================================
  postgres:
    image: postgres:16-alpine
    container_name: postgres-trading
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: redis-trading
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # ================================
  # Monitoring Stack
  # ================================
  
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-trading
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - trading-network
    depends_on:
      - solana-trading-bot

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-trading
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - trading-network
    depends_on:
      - prometheus

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger-trading
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - trading-network

  # ================================
  # Utility Services
  # ================================
  
  # Redis Commander - Redis Management UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - trading-network
    depends_on:
      - redis

  # pgAdmin - PostgreSQL Management UI
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-trading
    restart: unless-stopped
    ports:
      - "8082:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@localhost
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - trading-network
    depends_on:
      - postgres
    profiles:
      - management

# ================================
# Networks
# ================================
networks:
  trading-network:
    driver: bridge
    name: trading-network

# ================================
# Volumes
# ================================
volumes:
  app_data:
    name: trading_bot_data
  app_logs:
    name: trading_bot_logs
  postgres_data:
    name: trading_postgres_data
  redis_data:
    name: trading_redis_data
  prometheus_data:
    name: trading_prometheus_data
  grafana_data:
    name: trading_grafana_data
  pgadmin_data:
    name: trading_pgadmin_data