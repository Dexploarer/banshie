# Observability Stack for Solana Trading Bot
# Complete monitoring, tracing, and alerting setup

version: '3.8'

services:
  # ================================
  # OpenTelemetry Collector
  # ================================
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.95.0
    container_name: otel-collector
    hostname: otel-collector
    networks:
      - monitoring
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
      - "13133:13133" # Health check
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otelcol-contrib/otel-collector-config.yaml
    command: ["--config=/etc/otelcol-contrib/otel-collector-config.yaml"]
    depends_on:
      - jaeger
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Jaeger - Distributed Tracing
  # ================================
  
  jaeger:
    image: jaegertracing/all-in-one:1.54
    container_name: jaeger
    hostname: jaeger
    networks:
      - monitoring
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - SPAN_STORAGE_TYPE=memory
      - LOG_LEVEL=info
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Prometheus - Metrics Collection
  # ================================
  
  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    hostname: prometheus
    networks:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus-rules.yml:/etc/prometheus/rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--enable-feature=exemplar-storage'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Grafana - Visualization & Dashboards
  # ================================
  
  grafana:
    image: grafana/grafana:10.3.3
    container_name: grafana
    hostname: grafana
    networks:
      - monitoring
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-clock-panel,briangann-gauge-panel
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      - GF_SERVER_ROOT_URL=http://localhost:3000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # AlertManager - Alert Management
  # ================================
  
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    hostname: alertmanager
    networks:
      - monitoring
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Loki - Log Aggregation
  # ================================
  
  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    hostname: loki
    networks:
      - monitoring
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Promtail - Log Collection
  # ================================
  
  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    hostname: promtail
    networks:
      - monitoring
    volumes:
      - ./config/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    restart: unless-stopped

  # ================================
  # Node Exporter - System Metrics
  # ================================
  
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    hostname: node-exporter
    networks:
      - monitoring
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # ================================
  # cAdvisor - Container Metrics
  # ================================
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    hostname: cadvisor
    networks:
      - monitoring
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped

  # ================================
  # Redis for Caching & Sessions
  # ================================
  
  redis:
    image: redis:7.2-alpine
    container_name: observability-redis
    hostname: redis
    networks:
      - monitoring
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # PostgreSQL for Metrics Storage (Optional)
  # ================================
  
  postgres-metrics:
    image: postgres:16.1-alpine
    container_name: postgres-metrics
    hostname: postgres-metrics
    networks:
      - monitoring
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=metrics
      - POSTGRES_USER=metrics_user
      - POSTGRES_PASSWORD=${POSTGRES_METRICS_PASSWORD:-metrics_password}
    volumes:
      - postgres_metrics_data:/var/lib/postgresql/data
      - ./config/init-metrics-db.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metrics_user -d metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

# ================================
# Networks & Volumes
# ================================

networks:
  monitoring:
    driver: bridge
    name: solana-bot-monitoring

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  redis_data:
    driver: local
  postgres_metrics_data:
    driver: local